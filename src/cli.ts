#!/usr/bin/env node

/* eslint-disable no-useless-escape */

import chalk from 'chalk';
import { Command } from 'commander';
import { writeFileSync } from 'fs';
import path from 'path';
import packageJson from '../package.json';
import { GitaristRunner } from './gitarist-runner';
import { Templates } from './gitarist-template';
import { RunOptions } from './cli.interface';

/**
 * Generated by figlet
 * https://www.npmjs.com/package/figlet
 */
const logo = `
          _ __             _      __ 
   ____ _(_) /_____ ______(_)____/ /_
  / __ \`/ / __/ __ \`/ ___/ / ___/ __/
 / /_/ / / /_/ /_/ / /  / (__  ) /_
 \__, /_/\__/\__,_/_/  /_/____/\__/
/____/
`;

console.log(logo);

const runner = new GitaristRunner();
const program = new Command();

program
  .name(packageJson.name)
  .description(packageJson.description)
  .version(packageJson.version);

program
  .command('init')
  .description('initialize')
  .action(() => {
    runner.runInitialize({});
  });

program
  .command('generate')
  .alias('g')
  .description('generate gitarist project')
  .argument('[dir]', 'directory to create [default: .]', '.')
  .action(async (dir = '.') => {
    runner.runInitialize(dir);

    writeFileSync(
      path.join(process.cwd(), dir, 'package.json'),
      Templates.getPackageJsonTemplate(dir)
    );
    writeFileSync(
      path.join(process.cwd(), dir, 'README.md'),
      Templates.getReadmeTemplate(dir)
    );

    console.log(
      `\nCreated at ` + chalk.greenBright.bold(path.join(process.cwd(), dir))
    );
  });

program
  .command('run')
  .description('run gitarist suite')
  .option(
    '-t,--token <string>',
    'Github token(https://github.com/settings/tokens/new?description=GITARIST_TOKEN&scopes=repo,read:packages,read:org,delete_repo,workflow)'
  )
  .option('-o,--owner <string>', 'Githb owner')
  .option('-r,--repo <string>', 'Github repository')
  .option('-cmin,--min-commits <number>,', 'Minimum number of commits per day')
  .option('-cmax,--max-commits <number>,', 'Maximum number of commits per day')
  .option('-fmin,--min-files <number>,', 'Minimum number of files per commit')
  .option('-fmax,--max-files <number>,', 'Maximum number of files per commit')
  .action((options: RunOptions) => {
    process.env.GITARIST_OWNER = options.owner;
    process.env.GITARIST_REPO = options.repo;
    process.env.GITARIST_TOKEN = options.token;

    runner.runImitateActiveUser({
      maxCommits: options.maxCommits,
      minCommits: options.minCommits,
      maxFiles: options.maxFiles,
      minFiles: options.minFiles,
    });
  });

program
  .command('repo:list')
  .description('List all repositories names')
  .option('-d,--directory <string>', 'Directory to save repositories as a file')
  .action(async (options) => {
    const repoList = await runner.runListRepositories({
      repoLogPath: options.directory,
    });

    console.log(repoList);
  });

program
  .command('repo:delete')
  .description('Delete all repositories')
  .action(async () => {
    await runner.runDeleteRepositoryList({});
  });

program.parse();
