{"version":3,"sources":["../src/github.ts","../src/github-action.ts"],"names":["ref","tree","path"],"mappings":"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","sourcesContent":["/* eslint-disable no-useless-escape */\n\nimport { faker } from '@faker-js/faker';\nimport { existsSync, lstatSync, mkdirSync, readFileSync, rmSync, writeFileSync } from 'fs';\nimport { readFile, rm } from 'fs/promises';\nimport _ from 'lodash';\nimport { Octokit } from 'octokit';\nimport parseGitConfig from 'parse-git-config';\nimport path from 'path';\n\nexport const branchPrefixes = ['feature', 'hotfix'] as const;\nexport const workflowStatus = [\n  'completed',\n  'action_required',\n  'cancelled',\n  'failure',\n  'neutral',\n  'skipped',\n  'stale',\n  'success',\n  'timed_out',\n  'in_progress',\n  'queued',\n  'requested',\n  'waiting',\n];\nexport const commitCategories = [\n  'feat',\n  'fix',\n  'docs',\n  'style',\n  'refactor',\n  'perf',\n  'test',\n  'chore',\n] as const;\nexport const DEFAULT = {\n  maxCommits: 3,\n  minCommits: 1,\n  maxFiles: 4,\n  minFiles: 1,\n  numberOfIssues: 2,\n  workingBranchPrefix: branchPrefixes[0],\n  mainBranch: 'main',\n  relativePath: '.gitarist',\n  remote: 'origin',\n  cron: '0 */6 * * 0-6',\n  stale: 2, // days\n  language: 'GO',\n  ownerPlaceholder: '<OWNER>',\n  repoPlaceholder: '<REPOSITORY>',\n} as const;\n\nenum MODE {\n  BLOB = '120000',\n  BLOB__FILE = '100644',\n  BLOB__EXECUTABLE = '100755',\n  TREE__DIRECTORY = '040000',\n  COMMIT__SUBMODULE = '160000',\n}\n\nexport type Language = 'GO' | 'PYTHON' | 'JAVA' | 'CPP' | 'TEXT';\nexport type SetupCommandOptions = {\n  remote: string;\n};\nexport type StartCommandOptions = {\n  owner: string;\n  repo: string;\n  token: string;\n} & {\n  minCommits: number;\n  maxCommits: number;\n  minFiles: number;\n  maxFiles: number;\n  issues: number;\n  workingBranchPrefix: BranchPrefix;\n  mainBranch: MainBranch;\n  stale: number;\n};\nexport type BranchPrefix = (typeof branchPrefixes)[number]; // TypeScript 3.4+\nexport type MainBranch = 'main' | 'master' | string;\nexport type TreeParam = {\n  path?: string | undefined;\n  mode?: MODE;\n  type?: 'blob' | 'tree' | 'commit' | undefined;\n  sha?: string | undefined;\n  content?: string | undefined;\n};\nexport type IssueItem = {\n  title: string;\n  body: string;\n  assignee?: string;\n  /**\n   * comma separated string\n   */\n  labels?: string;\n};\n\nexport class Gitarist {\n  private readonly _octokit;\n  private readonly _owner: string;\n  private readonly _repo: string;\n  private readonly _token: string;\n  private readonly labelsCandidates = [\n    {\n      name: 'enhancement',\n      color: 'a2eeef',\n      description: 'New feature or request',\n    },\n    {\n      name: 'bug',\n      color: 'd73a4a',\n      description: \"Something isn't working\",\n    },\n    {\n      name: 'documentation',\n      color: '0075ca',\n      description: 'Improvements or additions to documentation',\n    },\n    {\n      name: 'duplicate',\n      color: 'cfd3d7',\n      description: 'This issue or pull request already exists',\n    },\n  ];\n  private assigneeCandidates: string[] = [];\n  private languageMap: Record<Language, { ext: string; comment: string }> = {\n    GO: { ext: 'go', comment: '//' },\n    PYTHON: { ext: 'py', comment: '#' },\n    JAVA: { ext: 'java', comment: '//' },\n    CPP: { ext: 'cc', comment: '//' },\n    TEXT: { ext: 'txt', comment: '' },\n  };\n\n  constructor({ owner, repo, token }: { owner: string; repo: string; token: string }) {\n    this._owner = owner;\n    this._repo = repo;\n    this._token = token;\n\n    if (!this._owner) {\n      throw new Error('Missing environment variable: \"GITHUB_OWNER\"');\n    }\n\n    if (!this._repo) {\n      throw new Error('Missing environment variable: \"GITHUB_REPO\"');\n    }\n\n    if (!this._token) {\n      throw new Error('Missing environment variable: \"GITHUB_TOKEN\"');\n    }\n\n    this._octokit = new Octokit({ auth: this._token });\n    this.assigneeCandidates = [this._owner];\n  }\n\n  get owner() {\n    return this._owner;\n  }\n\n  get repo() {\n    return this._repo;\n  }\n\n  get octokit(): Octokit {\n    return this._octokit;\n  }\n\n  static get logo() {\n    return `\n          _ __             _      __ \n   ____ _(_) /_____ ______(_)____/ /_\n  / __ \\`/ / __/ __ \\`/ ___/ / ___/ __/\n / /_/ / / /_/ /_/ / /  / (__  ) /_\n \\__, /_/\\__/\\__,_/_/  /_/____/\\__/\n/____/ \n`;\n  }\n\n  static get tokenIssueUrl() {\n    return 'https://github.com/settings/tokens/new?description=GITHUB_TOKEN&scopes=repo,read:packages,read:org,delete_repo,workflow';\n  }\n\n  static getEnvSettingPageUrl({ owner, repo }: { owner: string; repo: string }) {\n    return `https://github.com/${owner}/${repo}/settings/secrets/actions/new`;\n  }\n\n  /**\n   * Create a github action file\n   * @example '0 \\*\\/4 \\* \\* 0-6' means 'for every N hours Sunday to Saturday'\n   */\n  static getActionTemplate({\n    cron = DEFAULT.cron,\n    repo = '<REPO>',\n    owner = '<USERNAME>',\n  }: {\n    cron?: string;\n    repo?: string;\n    owner?: string;\n  }) {\n    const template = `\n    \nname: Gitarist\n\non: \n  workflow_dispatch:\n  schedule:\n    - cron: '${cron}'\n\njobs:\n  start:\n    runs-on: ubuntu-latest\n    env:\n      GITHUB_OWNER: \\${{ github.repository_owner }}\n      GITHUB_REPO: \\${{ github.event.repository.name }}\n      # Create a secret key at,\n      # ${this.tokenIssueUrl}\n      # and register the secret key to action settings at,\n      # ${Gitarist.getEnvSettingPageUrl({ owner, repo })}\n      GITHUB_TOKEN: \\${{ secrets.GITHUB_TOKEN }}\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n      - run: npx gitarist start\n`;\n\n    return template;\n  }\n\n  /**\n   * Create the .env file\n   * @param owner\n   * @param repo\n   * @param token\n   * @returns\n   */\n  static getEnvTemplate({ owner = '', repo = '', token = '' }) {\n    const template = `\n# gitarist    \nGITHUB_OWNER=\"${owner}\"\nGITHUB_REPO=\"${repo}\"\n# ${Gitarist.tokenIssueUrl}\nGITHUB_TOKEN=\"${token}\"\n`;\n\n    return template;\n  }\n\n  /**\n   * Setup a repository for gitarist which is creating a workflow file.\n   */\n  static async setup({ remote = DEFAULT.remote }: Partial<SetupCommandOptions>) {\n    const gitConfigPath = path.join(process.cwd(), '.git', 'config');\n    if (!existsSync(gitConfigPath)) {\n      throw new Error(\n        `Could not find git config file from this directory, ${gitConfigPath}. This is not a git repository. Maybe you should run \"git init\" first.`,\n      );\n    }\n\n    const dotenvFile = '.env';\n    const envPath = path.join(process.cwd(), dotenvFile);\n    console.log(`Searching ${dotenvFile} file from ${envPath} ...`);\n    if (existsSync(envPath)) {\n      console.log(\n        `\\tThere is a ${dotenvFile} file already so template will be appended to the file.`,\n      );\n    } else {\n      console.log(`\\tCould not find a ${dotenvFile} file`);\n    }\n\n    const ymlPath = path.join(process.cwd(), '.github', 'workflows', 'gitarist.yml');\n    console.log(`Searching gitarist workflow file from ${envPath} ...`);\n    if (existsSync(ymlPath)) {\n      console.log(`\\tThere is a gitarist workflow file already at ${ymlPath}.`);\n    } else {\n      console.log(`\\tCould not find a workflow file`);\n    }\n\n    const git = parseGitConfig.sync(\n      readFileSync(path.join(process.cwd(), '.git', 'config'), 'utf8'),\n    );\n    const owner = git?.user?.name ?? DEFAULT.ownerPlaceholder;\n    const repo =\n      git[`remote \"${remote}\"`]?.url?.split('/')?.pop()?.replace('.git', '').replace('/', '') ??\n      DEFAULT.repoPlaceholder;\n    const githubWorkflowDirectory = path.join(process.cwd(), '.github', 'workflows');\n    mkdirSync(githubWorkflowDirectory, { recursive: true });\n    writeFileSync(\n      path.join(githubWorkflowDirectory, 'gitarist.yml'),\n      Gitarist.getActionTemplate({ owner, repo }),\n      { encoding: 'utf8', flag: 'a+' },\n    );\n    writeFileSync(path.join(process.cwd(), '.env'), Gitarist.getEnvTemplate({ owner, repo }), {\n      encoding: 'utf8',\n      flag: 'a+',\n    });\n\n    console.log(['Generate a secret key settings:', Gitarist.tokenIssueUrl].join('\\n'));\n    // Open the browser to create a secret key\n    const open = await import('open');\n    await open.default(Gitarist.tokenIssueUrl, { wait: false });\n    const envSettingPageUrl = Gitarist.getEnvSettingPageUrl({ owner, repo });\n    console.log(`Register the secret key to action settings: ${envSettingPageUrl}`);\n    console.log(\n      'Go to repository > settings > Secrets and variables > Actions > New repository secret',\n    );\n\n    if (owner !== DEFAULT.ownerPlaceholder) {\n      console.error(`It is unable to find git username`);\n      return;\n    }\n\n    if (repo !== DEFAULT.repoPlaceholder) {\n      console.error(`It is unable to find repository name.`);\n      return;\n    }\n\n    await open.default(Gitarist.tokenIssueUrl, { wait: false });\n    await open.default(envSettingPageUrl, { wait: false });\n  }\n\n  /**\n   * create a commit\n   * make a pull request\n   * review it\n   * merge it\n   */\n  async simulateActiveUser({\n    maxCommits = DEFAULT.maxCommits,\n    minCommits = DEFAULT.minCommits,\n    maxFiles = DEFAULT.maxFiles,\n    minFiles = DEFAULT.minFiles,\n    numberOfIssues = DEFAULT.numberOfIssues,\n    workingBranchPrefix = DEFAULT.workingBranchPrefix,\n    mainBranch = DEFAULT.mainBranch,\n    stale = DEFAULT.stale,\n    language = DEFAULT.language,\n  }: {\n    maxCommits?: number;\n    minCommits?: number;\n    maxFiles?: number;\n    minFiles?: number;\n    numberOfIssues?: number;\n    workingBranchPrefix?: BranchPrefix; // prefix of current working branch\n    mainBranch?: MainBranch; // merge target branch\n    stale?: number;\n    language?: Language;\n  }) {\n    for (const key of Array(numberOfIssues).keys()) {\n      console.debug(`issue: ${key + 1}/${numberOfIssues}`);\n      await this.createCommitAndMakePullRequest({\n        numberOfCommits: _.sample(_.range(minCommits, maxCommits + 1)) as number,\n        numberOfFiles: _.sample(_.range(minFiles, maxFiles + 1)) as number,\n        workingBranchPrefix,\n        mainBranch,\n        language,\n      });\n    }\n\n    const olderThan = new Date(Date.now() - stale * 86400 * 1000);\n    await this.deleteOldWorkflowLogs({ olderThan });\n    await this.deleteOldFiles({ olderThan, mainBranch });\n    await this.resolveAllReviewComments();\n    await this.deleteOldIssues({ olderThan });\n    await this.deleteCommentsAtIssueByBot();\n    await this.deleteBranches({ ref: `heads/${workingBranchPrefix}` });\n    await this.closeStaleIssues({ olderThan });\n  }\n\n  async closeStaleIssues({ olderThan }: { olderThan: Date }) {\n    // close issues that are older than the specified date\n    for await (const { data: issues } of this.octokit.paginate.iterator(\n      this.octokit.rest.issues.listForRepo,\n      {\n        owner: this.owner,\n        repo: this.repo,\n        per_page: 100,\n        sort: 'created',\n        direction: 'desc',\n      },\n    )) {\n      for (const issue of issues) {\n        if (new Date(issue.created_at).getTime() < new Date(olderThan).getTime()) {\n          await this.octokit.rest.issues.update({\n            owner: this.owner,\n            repo: this.repo,\n            issue_number: issue.number,\n            state: 'closed',\n          });\n        }\n      }\n    }\n  }\n\n  async deleteOldIssues({ olderThan }: { olderThan: Date }) {\n    for await (const { data: issues } of this.octokit.paginate.iterator(\n      this.octokit.rest.issues.listForRepo,\n      {\n        owner: this.owner,\n        repo: this.repo,\n        per_page: 100,\n        sort: 'created',\n        direction: 'desc',\n      },\n    )) {\n      for (const issue of issues) {\n        if (issue.pull_request?.url) {\n          // if the issue is a PR, then deletion is prohibited\n          continue;\n        }\n\n        if (new Date(issue.created_at).getTime() < new Date(olderThan).getTime()) {\n          const query = `\n          mutation DeleteIssue($input: DeleteIssueInput!) {\n            deleteIssue(input: $input) {\n              repository {\n                name\n              }\n            }\n          }\n        `;\n          try {\n            const result = await this.octokit.graphql(query, {\n              input: {\n                issueId: issue.node_id,\n              },\n            });\n            console.debug(result, issue.pull_request?.url);\n          } catch (error: any) {\n            // try-catch를 써야하는 이유는 다음과 같다. 깃헙은 이슈와 PR이 연동되어있다. 이슈에서 PR을 생성한 경우 이슈가 PR로 넘어가게되며 이슈는 더이상 삭제할 수 없게된다. 그리고 삭제 시도시 에러가 발생한다.\n            console.debug(error?.message, issue.pull_request?.url);\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * ref와 부분일치하는 브랜치\n   * @example 'heads/feat' 이걸로 시작하는 모든 브랜치 삭제\n   */\n  async listBranches({ ref }: { ref: string }) {\n    const { data: branches } = await this.octokit.rest.git.listMatchingRefs({\n      owner: this.owner,\n      repo: this.repo,\n      ref,\n    });\n    console.debug(`branche names starts with ${ref}: [${branches.map(({ ref }) => ref).join()}]`);\n    return branches;\n  }\n\n  /**\n   * ref와 부분일치하는 브랜치\n   * @example 'heads/feat' 이걸로 시작하는 모든 브랜치 삭제\n   */\n  async deleteBranches({\n    ref,\n    mainBranch = DEFAULT.mainBranch,\n  }: {\n    ref: string;\n    mainBranch?: MainBranch;\n  }) {\n    const { data: refs } = await this.octokit.rest.git.listMatchingRefs({\n      owner: this.owner,\n      repo: this.repo,\n      ref,\n    });\n\n    console.debug(`branche names starts with ${ref}: [${refs.map(({ ref }) => ref).join()}]`);\n\n    for (let { ref } of refs) {\n      if (ref.startsWith('refs/heads/')) {\n        ref = ref.replace('refs/', '');\n      }\n\n      console.debug(`delete branch. ref: ${ref}`);\n\n      await this.octokit.rest.git.updateRef({\n        owner: this.owner,\n        repo: this.repo,\n        sha: '', // empty SHA denotes deletion of the branch\n        ref: `heads/${mainBranch}`,\n      });\n    }\n  }\n\n  async deleteFolder({\n    folderPaths,\n    relative,\n  }: {\n    folderPaths: string[];\n    /**\n     * if true, then folderPaths are relative paths from the current working directory(process.cwd())\n     */\n    relative?: boolean;\n  }) {\n    if (relative) {\n      folderPaths = folderPaths.map((folderPath) => path.join(process.cwd(), folderPath));\n    }\n\n    for (const folderPath of folderPaths) {\n      if (!existsSync(folderPath) || !lstatSync(folderPath).isDirectory()) {\n        continue;\n      }\n      console.warn(`delete folder. folderPath: ${folderPath}`);\n      rmSync(folderPath, { recursive: true, force: true });\n    }\n  }\n\n  async deleteCommentsAtIssueByBot() {\n    for await (const issue of await this.octokit.paginate(this.octokit.rest.issues.list, {\n      owner: this.owner,\n      repo: this.repo,\n      filter: 'all',\n    })) {\n      for await (const comment of await this.octokit.paginate(\n        this.octokit.rest.issues.listComments,\n        {\n          owner: this.owner,\n          repo: this.repo,\n          issue_number: issue.number,\n          per_page: 100,\n        },\n      )) {\n        if (comment.user?.login?.includes('[bot]')) {\n          console.debug(`remove comment issue. issue: ${issue.number}, comment: ${comment.id}`);\n          await this.octokit.rest.issues.deleteComment({\n            owner: this.owner,\n            repo: this.repo,\n            comment_id: comment.id,\n          });\n        }\n      }\n    }\n  }\n\n  /**\n   * 현재 프로젝트에서 일정 기간이 지난 파일을 삭제한다. 실제 파일이 로컬에서 삭제되는게 중요한게 아니라 깃에서 삭제되는게 중요하다.\n   */\n  async deleteOldFiles({\n    olderThan,\n    mainBranch = DEFAULT.mainBranch,\n  }: {\n    olderThan: Date;\n    mainBranch?: MainBranch;\n  }): Promise<void> {\n    console.debug('start to delete old files');\n    const { data: branchRef } = await this.octokit.rest.git.getRef({\n      owner: this.owner,\n      repo: this.repo,\n      ref: `heads/${mainBranch}`,\n    });\n    const latestCommitSha = branchRef.object.sha; // Get the latest commit SHA of the branch\n\n    const { data: currentTree } = await this.octokit.rest.git.getTree({\n      owner: this.owner,\n      repo: this.repo,\n      tree_sha: latestCommitSha,\n      recursive: 'true',\n    });\n    const targetFilePaths = currentTree.tree\n      .filter((file) => {\n        const fullPath = path.join(process.cwd(), file.path ?? '');\n        const createdAt = new Date(Number.parseInt(path.basename(fullPath))).getTime();\n        const flag =\n          file.type === 'blob' &&\n          file.path?.startsWith(`${DEFAULT.relativePath}/`) &&\n          !isNaN(createdAt) &&\n          createdAt < new Date(olderThan).getTime();\n        return flag;\n      })\n      .map((tree) => {\n        console.debug(`will be deleted. ${tree.path}}`);\n        return tree.path;\n      });\n\n    if (targetFilePaths.length === 0) {\n      return;\n    }\n\n    // Create a tree object with the file deletion\n    const { data: tree } = await this.octokit.rest.git.createTree({\n      owner: this.owner,\n      repo: this.repo,\n      base_tree: latestCommitSha,\n      tree: targetFilePaths.map((path) => ({\n        path,\n        type: 'tree',\n        mode: MODE.BLOB__FILE,\n        sha: null, // To indicate file deletion\n      })),\n    });\n\n    const newTreeSha = tree.sha;\n\n    // Create a new commit object referencing the new tree and the previous commit\n    const { data: newCommit } = await this.octokit.rest.git.createCommit({\n      owner: this.owner,\n      repo: this.repo,\n      message: 'feat: clean up stale files',\n      tree: newTreeSha,\n      parents: [latestCommitSha],\n    });\n\n    // Update the branch reference to point to the new commit\n    const { data: pushed } = await this.octokit.rest.git.updateRef({\n      owner: this.owner,\n      repo: this.repo,\n      ref: `heads/${mainBranch}`,\n      sha: newCommit.sha,\n    });\n    console.debug(`commit pushed. sha: ${pushed.object.sha}`);\n  }\n\n  async createIssuesFromJson({ relativePath }: { relativePath: string }) {\n    const data = await readFile(path.join(process.cwd(), relativePath), 'utf8');\n\n    try {\n      const issueItems = JSON.parse(data);\n      this.validateIssueTemplate(issueItems);\n      await this.createMultipleIssues({ issueItems });\n    } catch (error: any) {\n      console.error(error.message);\n    }\n  }\n\n  async createMultipleIssues({ issueItems }: { issueItems: IssueItem[] }) {\n    for (const item of issueItems) {\n      const { data: issue } = await this.octokit.rest.issues.create({\n        owner: this.owner,\n        repo: this.repo,\n        title: item.title,\n        body: item.body,\n        labels: item.labels?.split(',').map((label) => label.trim()),\n      });\n      if (!item.assignee) {\n        continue;\n      }\n      const { status } = await this.octokit.rest.issues.checkUserCanBeAssigned({\n        owner: this.owner,\n        repo: this.repo,\n        assignee: item.assignee,\n      });\n      if (status !== 204) {\n        continue;\n      }\n      await this.octokit.rest.issues.addAssignees({\n        repo: this.repo,\n        owner: this.owner,\n        issue_number: issue.number,\n        assignees: [item.assignee],\n      });\n    }\n  }\n\n  /**\n   * 과금되고 있는 github action을 감지한다.\n   */\n  async findWastedActionsOverAllRepositories() {\n    for await (const { data: repositories } of this.octokit.paginate.iterator(\n      this.octokit.rest.repos.listForAuthenticatedUser,\n      {\n        username: this.owner,\n      },\n    )) {\n      for (const { name } of repositories) {\n        for await (const { data: workflows } of this.octokit.paginate.iterator(\n          this.octokit.rest.actions.listRepoWorkflows,\n          {\n            owner: this.owner,\n            repo: name,\n          },\n        )) {\n          for (const workflow of workflows) {\n            /**\n             * Github workflow ID can be found in url.\n             * @example if the action url is https://github.com/<owner>/<repo>/actions/workflows/build-and-test.yml, then \"build-and-test.yml\" is workflow id'\n             */\n            const usages = await this.octokit.rest.actions.getWorkflowUsage({\n              owner: this.owner,\n              repo: name,\n              workflow_id: workflow.id,\n            });\n            let data = {\n              repo: name,\n              workflowName: workflow.name,\n            };\n            if (usages.data.billable.UBUNTU) {\n              data = { ...data, ...usages.data.billable.UBUNTU };\n            }\n            if (usages.data.billable.MACOS) {\n              data = { ...data, ...usages.data.billable.MACOS };\n            }\n            if (usages.data.billable.WINDOWS) {\n              data = { ...data, ...usages.data.billable.WINDOWS };\n            }\n          }\n        }\n      }\n    }\n  }\n\n  async resolveAllReviewComments() {\n    const MAX_ITERATION = 10;\n    let iter = 0;\n    let nextPullRequestCursor = null;\n    let threadAfter = null;\n\n    const listPullRequestsAndReviewThreadsQuery = `\n      query ListRepos(\n        $owner: String!\n        $repo: String!\n        $pullRequestFirst: Int!\n        $threadFirst: Int!\n        $pullRequestAfter: String\n        $threadAfter: String\n      ) {\n        repository(owner: $owner, name: $repo) {\n          pullRequests(\n            first: $pullRequestFirst\n            after: $pullRequestAfter\n            orderBy: { field: CREATED_AT, direction: DESC }\n          ) {\n            edges {\n              cursor\n              node {\n                number\n                mergeable\n                reviewThreads(first: $threadFirst, after: $threadAfter) {\n                  edges {\n                    node {\n                      id\n                      isResolved\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    `;\n\n    const resolvedThreadIds: string[] = [];\n    // TODO: convert to octokit.graphql.paginate rather than MAX_ITERATION\n    while (iter++ < MAX_ITERATION) {\n      const queryResult: any = await this.octokit\n        .graphql(listPullRequestsAndReviewThreadsQuery, {\n          owner: this.owner,\n          repo: this.repo,\n          pullRequestFirst: 10,\n          pullRequestAfter: nextPullRequestCursor, // cursor, base64 encoded string\n          threadFirst: 10,\n          threadAfter, // cursor, base64 encoded string\n        })\n        .catch((error: any) => {\n          console.error(error.message);\n        });\n\n      if (!queryResult) {\n        continue;\n      }\n\n      // edge는 pull request의 필드이름일뿐으로 다른의미는 없는 걸로 보임\n      const edges = queryResult.repository.pullRequests.edges;\n\n      if (edges?.length > 0) {\n        if (typeof edges[0].node.number === 'number') {\n          // console.debug(`pull requests: [${edges.join()}]`);\n        }\n        if (typeof edges[0] === 'number') {\n          // console.debug(`pull requests: [${edges.join()}]`);\n        }\n      }\n      // console.debug(`pull requests: [${edges.join()}]`);\n\n      const unresolvedThreads = edges\n        .map((edge: any) => edge.node.reviewThreads.edges.map(({ node }: any) => node))\n        .flat()\n        .filter((node: any) => node && !node.isResolved);\n      const unresolvedThreadIds = unresolvedThreads.map((node: any) => node.id);\n\n      console.debug(\n        `unresolvedThreadIds(total: ${\n          unresolvedThreadIds.length\n        }): [${unresolvedThreadIds.join()}]`,\n      );\n\n      const resolveReviewThreadMutation = `\n        mutation ResolveReviewThread($input: ResolveReviewThreadInput!) {\n          resolveReviewThread(input: $input) {\n            thread {\n              id\n            }\n          } \n        }\n      `;\n\n      const mutationResultList: any[] = [];\n\n      for (const threadId of unresolvedThreadIds) {\n        let hasError = false;\n        await this.octokit\n          .graphql(resolveReviewThreadMutation, {\n            input: {\n              threadId,\n            },\n          })\n          .then((response: any) => {\n            console.debug(`resolved thread. threadId: ${threadId}`);\n            resolvedThreadIds.push(threadId);\n            mutationResultList.push(response);\n          })\n          .catch((error: any) => {\n            console.error(error?.response?.data?.error);\n            console.error(error.message);\n            hasError = true;\n          });\n\n        if (hasError) {\n          break;\n        }\n      }\n\n      // 2개의 반복문으로 이루어져있음.\n      // 1. pull request에 대한 반복이 외부 반복문\n      // 2. comments thread에 대한 반복이 내부 반복문\n      if (unresolvedThreads.length === 0) {\n        threadAfter = null;\n        nextPullRequestCursor = edges[edges.length - 1]?.cursor ?? null;\n      } else {\n        threadAfter = unresolvedThreads[unresolvedThreads.length - 1]?.id ?? null;\n      }\n      if (edges.length === 0) {\n        break;\n      }\n    }\n\n    return resolvedThreadIds;\n  }\n\n  /**\n   * change pull request title and body\n   */\n  async changePullRequestData() {\n    for await (const { data: pullRequests } of this.octokit.paginate.iterator(\n      this.octokit.rest.pulls.list,\n      {\n        repo: this.repo,\n        owner: this.owner,\n        base: DEFAULT.mainBranch,\n        state: 'closed',\n        per_page: 100,\n        sort: 'created',\n      },\n    )) {\n      for (const pullRequest of pullRequests) {\n        const isTarget = false;\n\n        throw new Error('Write custom target condition when you are running this script!');\n\n        if (!isTarget) {\n          continue;\n        }\n        const pullRequestNumber = pullRequest.number;\n        console.debug(`change pull request. pull request: #${pullRequest.number}`);\n        await this.octokit.rest.pulls.update({\n          owner: this.owner,\n          repo: this.repo,\n          pull_number: pullRequestNumber,\n          title: `[${_.sample(commitCategories)}] ${faker.lorem.sentences(1)}`,\n          body: faker.lorem.paragraphs(10),\n        });\n      }\n    }\n  }\n\n  async deleteOldWorkflowLogs({ olderThan }: { olderThan: Date }) {\n    const deleteWorkflowStatus = [\n      'completed',\n      'action_required',\n      'cancelled',\n      'failure',\n      'neutral',\n      'skipped',\n      'success',\n      'timed_out',\n      'waiting',\n    ];\n\n    for await (const workflow of await this.octokit.paginate(\n      this.octokit.rest.actions.listRepoWorkflows,\n      {\n        owner: this.owner,\n        repo: this.repo,\n        per_page: 100,\n      },\n    )) {\n      for await (const run of await this.octokit.paginate(\n        this.octokit.rest.actions.listWorkflowRuns,\n        {\n          owner: this.owner,\n          repo: this.repo,\n          workflow_id: workflow.id,\n        },\n      )) {\n        if (\n          !(\n            new Date(run.created_at) < new Date(olderThan) &&\n            deleteWorkflowStatus.includes(run.status ?? '')\n          )\n        ) {\n          continue;\n        }\n        await this.octokit.rest.actions\n          .deleteWorkflowRun({\n            owner: this.owner,\n            repo: this.repo,\n            run_id: run.id,\n          })\n          .then(() => console.debug(`delete workflow run. runId: ${run.id}`))\n          .catch((error: any) => {\n            console.error(error.message);\n          });\n\n        await this.octokit.rest.actions\n          .deleteWorkflowRunLogs({\n            owner: this.owner,\n            repo: this.repo,\n            run_id: run.id,\n          })\n          .then(() => console.debug(`delete workflow run logs. runId: ${run.id}`))\n          .catch((error: any) => {\n            console.error(error.message);\n          });\n      }\n    }\n  }\n\n  private async createCommitAndMakePullRequest({\n    numberOfCommits,\n    numberOfFiles,\n    mainBranch: targetBranch,\n    workingBranchPrefix,\n    language,\n  }: {\n    numberOfCommits: number;\n    numberOfFiles: number;\n    mainBranch: MainBranch;\n    workingBranchPrefix: BranchPrefix;\n    language: Language;\n  }): Promise<number> {\n    const relativePath = DEFAULT.relativePath;\n\n    const { data: issue } = await this.octokit.rest.issues.create({\n      owner: this.owner,\n      repo: this.repo,\n      title: `[${_.sample<any>(commitCategories)}] ${faker.lorem.sentences(1)}`,\n      body: faker.lorem.paragraphs(10),\n      assignees: [_.sample<any>(this.assigneeCandidates)],\n    });\n    console.debug(`create an issue #${issue.number}`);\n\n    const label = _.sample<any>(this.labelsCandidates);\n    const { data: labels } = await this.octokit.rest.issues.listLabelsForRepo({\n      owner: this.owner,\n      repo: this.repo,\n    });\n    if (labels.every(({ name }) => name !== label.name)) {\n      await this.octokit.rest.issues.createLabel({\n        owner: this.owner,\n        repo: this.repo,\n        ...label,\n      });\n    }\n    await this.octokit.rest.issues.addLabels({\n      issue_number: issue.number,\n      owner: this.owner,\n      repo: this.repo,\n      labels: [label.name],\n    });\n\n    console.debug(`comment on issues #${issue.number}`);\n    await this.octokit.rest.issues.createComment({\n      owner: this.owner,\n      repo: this.repo,\n      body: faker.lorem.sentences(10),\n      issue_number: issue.number,\n    });\n\n    let createdFilePathList: string[] = [];\n\n    // get target branch's latest commit SHA and its tree's SHA\n    const { data: targetRef } = await this.octokit.rest.git.getRef({\n      owner: this.owner,\n      repo: this.repo,\n      ref: `heads/${targetBranch}`,\n    });\n\n    // Create a new branch based on the latest commit SHA of the base branch\n    const mainBranch = `${workingBranchPrefix}/issue-${issue.number}`;\n    console.debug(`create a new branch. refs/heads/${mainBranch}`);\n    await this.octokit.rest.git.createRef({\n      owner: this.owner,\n      repo: this.repo,\n      ref: `refs/heads/${mainBranch}`,\n      sha: targetRef.object.sha,\n    });\n\n    for (const commitCount of Array(numberOfCommits).keys()) {\n      console.debug(`start to create a commit... (${commitCount + 1}/${numberOfCommits})`);\n\n      console.debug(`create files. number of files: ${numberOfFiles}`);\n      createdFilePathList = this.createFiles({\n        numberOfFiles,\n        relativePath,\n        language,\n      });\n\n      // 해당 브랜치에 여러개의 파일 추가\n      // 실제 파일의 폴더구조는 무시하고 깃에 포함시킬 파일의 폴더구조를 tree로 정의할 수 있다. 실제 파일은 전혀 다른 경로에 있어도 깃에는 특정 경로에 파일이 들어가도록 할 수 있다.\n      const tree: TreeParam[] = [];\n      // for (const filePath of FastGlob.glob.sync([`${relativePath}/*`], { absolute: false })) { }\n      for (const filePath of createdFilePathList) {\n        console.debug(`a file created. ${filePath}`);\n        const { data: blob } = await this.octokit.rest.git.createBlob({\n          owner: this.owner,\n          repo: this.repo,\n          content: readFileSync(filePath, 'utf8'),\n          encoding: 'utf-8',\n        });\n        tree.push({\n          path: `${relativePath}/${path.basename(filePath)}`,\n          sha: blob.sha,\n          mode: MODE.BLOB__FILE,\n          type: 'blob',\n        });\n      }\n\n      // get latest commit SHA\n      const { data: latestCommit } = await this.octokit.rest.git.getCommit({\n        owner: this.owner,\n        repo: this.repo,\n        commit_sha: targetRef.object.sha,\n      });\n\n      // create a tree by attaching files based on the target branch's latest commit\n      console.debug(`create a tree. base tree: ${latestCommit.tree.sha}`);\n      const { data: newTree } = await this.octokit.rest.git.createTree({\n        owner: this.owner,\n        repo: this.repo,\n        tree,\n        base_tree: latestCommit.tree.sha,\n      });\n\n      const parents = [targetRef.object.sha];\n      console.debug(`tree created. parents: [${parents.join()}]`);\n      const { data: newCommit } = await this.octokit.rest.git.createCommit({\n        owner: this.owner,\n        repo: this.repo,\n        message: `${_.sample<any>(commitCategories)}: ${faker.lorem.sentences(1)}`,\n        tree: newTree.sha,\n        parents,\n      });\n\n      // git push (THE MOST IMPORTANT PART)\n      console.debug(`push the commit. ${newCommit.sha}`);\n      await this.octokit.rest.git.updateRef({\n        owner: this.owner,\n        repo: this.repo,\n        ref: `heads/${mainBranch}`,\n        sha: newCommit.sha,\n        force: true,\n      });\n    }\n\n    await this.createPullRequestAndReviewAndMerge({\n      baseBranch: targetBranch,\n      headBranch: `refs/heads/${mainBranch}`,\n      issue: issue.number,\n      commentTargetFilePath: `${relativePath}/${path.basename(createdFilePathList[0])}`, // first file path is used for comment\n    });\n\n    console.debug(`delete the source branch. heads/${mainBranch}`);\n    await this.octokit.rest.git\n      .deleteRef({\n        owner: this.owner,\n        repo: this.repo,\n        ref: `heads/${mainBranch}`, // `heads/<branch_name>` or simply `<branch_name>`\n      })\n      .catch((error: any) => {\n        // throws an error if \"Automatically delete head branch\" settins is enabled\n        console.error(error.message);\n      });\n\n    // leave a comment after merge\n    await this.octokit.rest.issues.createComment({\n      owner: this.owner,\n      repo: this.repo,\n      body: faker.lorem.sentences(10),\n      issue_number: issue.number,\n    });\n\n    // clean files up\n    await rm(path.join(process.cwd(), relativePath), {\n      recursive: true,\n      force: true,\n      maxRetries: 10,\n    }).catch((error: any) => {\n      console.error(error.message);\n    });\n    return issue.number;\n  }\n\n  private validateIssueTemplate(issues: IssueItem[]) {\n    issues.forEach((issue, index) => {\n      if (!issue.title) {\n        throw new Error(`[createIssuesFromJson][index: ${index}] Missing field: title`);\n      }\n      if (!issue.body) {\n        throw new Error(`[createIssuesFromJson][index: ${index}] Missing field: body`);\n      }\n      if (issue.assignee === '') {\n        throw new Error(`[createIssuesFromJson][index: ${index}] Invalid field: assignee`);\n      }\n    });\n  }\n\n  private async createPullRequestAndReviewAndMerge({\n    baseBranch,\n    headBranch,\n    issue,\n    commentTargetFilePath,\n  }: {\n    baseBranch: string;\n    headBranch: string;\n    issue: number;\n    commentTargetFilePath: string;\n  }) {\n    console.debug(`base branch: refs/heads/${baseBranch}`);\n    console.debug(`head branch: ${headBranch}`);\n\n    const { data: pullRequest } = await this.octokit.rest.pulls.create({\n      owner: this.owner,\n      repo: this.repo,\n      base: baseBranch,\n      head: headBranch,\n      issue,\n      body: faker.lorem.paragraphs(10),\n      draft: false,\n    });\n\n    if (!pullRequest) {\n      console.error('pull request is not found');\n      return;\n    }\n\n    const { data: reviewCommented } = await this.octokit.rest.pulls.createReview({\n      owner: this.owner,\n      repo: this.repo,\n      pull_number: pullRequest.number,\n      event: 'COMMENT',\n      comments: [\n        {\n          path: commentTargetFilePath,\n          body: faker.lorem.sentences(3),\n          line: 1,\n        },\n      ],\n    });\n\n    const reviewerCandidates = await this.octokit.rest.repos.listCollaborators({\n      owner: this.owner,\n      repo: this.repo,\n      permission: 'maintain',\n    });\n    const reviewrs = reviewerCandidates.data\n      .map((user) => user.login)\n      .filter((login) => login !== this.owner);\n\n    console.debug(`reviewer candidates: [${reviewrs.join()}]`);\n    if (reviewrs.length === 0) {\n      console.debug('Review by author is not allowed. No reviewer is assigned.');\n    } else {\n      // when a number of reviewer candidates is greater than 1\n      await this.octokit.rest.pulls.requestReviewers({\n        owner: this.owner,\n        repo: this.repo,\n        pull_number: pullRequest.number,\n        reviewers: [_.sample<any>(reviewrs)],\n      });\n\n      await this.octokit.rest.pulls.createReview({\n        owner: this.owner,\n        repo: this.repo,\n        pull_number: pullRequest.number,\n        event: 'APPROVE',\n        comments: [{ path: commentTargetFilePath, body: 'LGTM', line: 1 }],\n      });\n\n      await this.octokit.rest.pulls.submitReview({\n        owner: this.owner,\n        repo: this.repo,\n        pull_number: pullRequest.number,\n        event: 'APPROVE',\n        review_id: reviewCommented.id,\n      });\n\n      await this.octokit.rest.pulls.updateReview({\n        owner: this.owner,\n        repo: this.repo,\n        pull_number: pullRequest.number,\n        review_id: reviewCommented.id,\n        body: 'viewed',\n      });\n    }\n\n    const listPullRequestsAndReviewThreadsQuery = `\n      query ListRepos($owner: String!, $repo: String!, $pullRequestLast: Int!, $threadLast: Int!) {\n        repository(owner: $owner, name: $repo) {\n          pullRequests(last: $pullRequestLast, orderBy: { field: CREATED_AT, direction: DESC }) {\n            edges {\n              cursor\n              node {\n                number\n                mergeable\n                reviewThreads(last: $threadLast) {\n                  edges {\n                    node {\n                      id\n                      isResolved\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    `;\n\n    // 이슈에서 연동된 PR이라서 검색이 안되는걸로 보임...\n    const queryResult: any = await this.octokit.graphql(listPullRequestsAndReviewThreadsQuery, {\n      owner: this.owner,\n      repo: this.owner,\n      pullRequestLast: 100,\n      threadLast: 100,\n    });\n\n    const edges = queryResult.repository.pullRequests.edges;\n    console.debug(`pull requests: [${edges.join()}]`);\n\n    const threadIds = edges\n      .map((edge: any) => edge.node.reviewThreads.edges.map(({ node }: any) => node))\n      .flat()\n      .filter((node: any) => node && !node.isResolved)\n      .map((node: any) => node.id);\n\n    console.debug(`threadsIds:[${threadIds.join()}]`);\n\n    const resolveReviewThreadMutation = `\n      mutation ResolveReviewThread($input: ResolveReviewThreadInput!) {\n        resolveReviewThread(input: $input) {\n          thread {\n            id\n          }\n        }\n      }\n    `;\n    for (const threadId of threadIds) {\n      const mutationResult = await this.octokit.graphql(resolveReviewThreadMutation, {\n        input: {\n          threadId,\n        },\n      });\n      console.debug(mutationResult);\n    }\n\n    // merge pull request\n    const { data: mergeResult } = await this.octokit.rest.pulls.merge({\n      owner: this.owner,\n      repo: this.repo,\n      pull_number: pullRequest.number,\n      merge_method: 'squash',\n    });\n    console.debug(`merged. ${mergeResult.sha} ${mergeResult.message}`);\n  }\n\n  private createFiles({\n    numberOfFiles,\n    relativePath,\n    language,\n  }: {\n    numberOfFiles: number;\n    relativePath: string;\n    language: Language;\n  }) {\n    const directoryPath = path.join(process.cwd(), relativePath);\n    if (!existsSync(directoryPath)) {\n      mkdirSync(directoryPath, { recursive: true });\n    }\n\n    return Array.from({ length: numberOfFiles })\n      .map(() => {\n        try {\n          const filePath = path.join(\n            directoryPath,\n            `${Date.now().toString()}.${this.languageMap[language].ext}`,\n          );\n          writeFileSync(filePath, faker.lorem.paragraphs(10), {\n            encoding: 'utf8',\n            flag: 'a+',\n          });\n          return filePath;\n        } catch (error) {\n          console.error(error);\n          return '';\n        }\n      })\n      .filter(Boolean);\n  }\n}\n","import { DEFAULT, Gitarist } from './github';\n\n/**\nsteps:\n  - uses: thilllon/gitarist@v1.0.0\n    env:\n      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n      GITHUB_OWNER: ${{ github.repository_owner }}\n      GITHUB_REPO: ${{ github.event.repository.name }}\n */\n\nasync function main() {\n  const owner = process.env.GITHUB_OWNER;\n  const repo = process.env.GITHUB_REPO;\n  const token = process.env.GITHUB_TOKEN;\n\n  if (!owner) {\n    throw new Error('Check your environment variables. GITHUB_OWNER is missing');\n  }\n  if (!repo) {\n    throw new Error('Check your environment variables. GITHUB_REPO is missing');\n  }\n  if (!token) {\n    throw new Error('Check your environment variables. GITHUB_TOKEN is missing');\n  }\n\n  const gitarist = new Gitarist({ owner, repo, token });\n  await gitarist.simulateActiveUser({\n    mainBranch: DEFAULT.mainBranch,\n    maxCommits: DEFAULT.maxCommits,\n    maxFiles: DEFAULT.maxFiles,\n    minCommits: DEFAULT.minCommits,\n    minFiles: DEFAULT.minFiles,\n    numberOfIssues: DEFAULT.numberOfIssues,\n    workingBranchPrefix: DEFAULT.workingBranchPrefix,\n    stale: DEFAULT.stale,\n  });\n}\n\nmain();\n"]}