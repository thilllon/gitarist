{"version":3,"sources":["../package.json","../src/libs/env-example.ts","../src/libs/index.ts","../src/cli.ts"],"names":[],"mappings":"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","sourcesContent":["{\n  \"name\": \"gitarist\",\n  \"version\": \"1.2.10\",\n  \"description\": \"A CLI tool to utilize Octokit\",\n  \"license\": \"MIT\",\n  \"publishConfig\": {\n    \"access\": \"public\"\n  },\n  \"repository\": \"git@github.com:thilllon/gitarist.git\",\n  \"homepage\": \"https://github.com/thilllon/gitarist#readme\",\n  \"bugs\": {\n    \"url\": \"https://github.com/thilllon/gitarist/issues\"\n  },\n  \"contributors\": [\n    \"thilllon <thilllon970@gmail.com>\"\n  ],\n  \"author\": {\n    \"name\": \"thilllon\",\n    \"email\": \"thilllon970@gmail.com\",\n    \"url\": \"https://github.com/thilllon\"\n  },\n  \"funding\": [\n    {\n      \"type\": \"github\",\n      \"url\": \"http://github.com/thilllon\"\n    },\n    {\n      \"type\": \"ko_fi\",\n      \"url\": \"https://ko-fi.com/thilllon\"\n    }\n  ],\n  \"type\": \"commonjs\",\n  \"main\": \"./dist/index.js\",\n  \"types\": \"./dist/index.d.ts\",\n  \"exports\": {\n    \".\": {\n      \"require\": {\n        \"types\": \"./dist/index.d.ts\",\n        \"default\": \"./dist/index.js\"\n      },\n      \"import\": {\n        \"types\": \"./dist/index.d.ts\",\n        \"default\": \"./dist/index.mjs\"\n      }\n    }\n  },\n  \"bin\": {\n    \"gitarist\": \"./dist/cli.mjs\"\n  },\n  \"files\": [\n    \"dist\"\n  ],\n  \"scripts\": {\n    \"typecheck\": \"tsc --noEmit\",\n    \"build:tsc\": \"tsc\",\n    \"build\": \"tsup\",\n    \"format\": \"prettier --write --list-different .\",\n    \"prerelease\": \"pnpm format && pnpm lint && pnpm build\",\n    \"release\": \"release-it\",\n    \"lint\": \"eslint --fix .\",\n    \"test\": \"jest\",\n    \"test:esm\": \"cross-env NODE_OPTIONS=--experimental-vm-modules npx jest\",\n    \"test:cov\": \"jest --coverage\",\n    \"prepare\": \"husky install && chmod +x .husky/*\"\n  },\n  \"dependencies\": {\n    \"@faker-js/faker\": \"^8.4.1\",\n    \"@gitbeaker/requester-utils\": \"^40.0.3\",\n    \"@gitbeaker/rest\": \"^40.0.3\",\n    \"axios\": \"^1.7.1\",\n    \"commander\": \"^12.1.0\",\n    \"dotenv\": \"^16.4.5\",\n    \"fast-glob\": \"^3.3.2\",\n    \"lodash\": \"^4.17.21\",\n    \"octokit\": \"^4.0.2\",\n    \"open\": \"^10.1.0\",\n    \"parse-git-config\": \"^3.0.0\",\n    \"picocolors\": \"^1.0.1\",\n    \"zod\": \"^3.23.8\"\n  },\n  \"devDependencies\": {\n    \"@commitlint/cli\": \"^19.3.0\",\n    \"@commitlint/config-conventional\": \"^19.2.2\",\n    \"@eslint/js\": \"^9.3.0\",\n    \"@swc/core\": \"^1.5.7\",\n    \"@swc/jest\": \"^0.2.36\",\n    \"@types/jest\": \"^29.5.12\",\n    \"@types/lodash\": \"^4.17.4\",\n    \"@types/node\": \"^20.12.12\",\n    \"@types/parse-git-config\": \"^3.0.4\",\n    \"commitizen\": \"^4.3.0\",\n    \"commitlint\": \"^19.3.0\",\n    \"cross-env\": \"^7.0.3\",\n    \"eslint\": \"^9.3.0\",\n    \"git-cz\": \"^4.9.0\",\n    \"husky\": \"^9.0.11\",\n    \"jest\": \"^29.7.0\",\n    \"lint-staged\": \"^15.2.2\",\n    \"prettier\": \"^3.2.5\",\n    \"release-it\": \"^17.3.0\",\n    \"ts-jest\": \"^29.1.2\",\n    \"ts-node\": \"^10.9.2\",\n    \"tsup\": \"^8.0.2\",\n    \"tsx\": \"^4.10.5\",\n    \"typescript\": \"^5.4.5\",\n    \"typescript-eslint\": \"^7.10.0\"\n  }\n}\n","import fs from 'fs';\nimport path from 'path';\n\nexport type CreateEnvExampleOptions = {\n  filename: string;\n  comments: boolean;\n  merge: boolean;\n};\n\nexport async function createEnvExample(options: CreateEnvExampleOptions) {\n  const keySet = new Set<string>();\n  const output = fs\n    .readFileSync(path.join(process.cwd(), options.filename), 'utf8')\n    .split('\\r')\n    .join('')\n    .split('\\n')\n    .map((line) => line.trim())\n    .map((line, index) => {\n      if (line === '') {\n        return '';\n      }\n      if (line.startsWith('#')) {\n        return options.comments ? line : null;\n      }\n      if (line.indexOf('=') === -1) {\n        throw new Error(`Line ${index} does not have a valid config (i.e. no equals sign).`);\n      }\n      const key = line.split('=')[0];\n      if (options.merge && keySet.has(key)) {\n        return null;\n      } else {\n        keySet.add(key);\n        return key + '=';\n      }\n    })\n    .filter((line) => line !== null)\n    .join('\\n');\n\n  fs.writeFileSync(path.join(process.cwd(), '.env.example'), output, {\n    encoding: 'utf-8',\n    flag: 'w+',\n  });\n  console.log('âœ¨ .env.example successfully generated.');\n}\n","export * from './env-example';\n","#!/usr/bin/env node\n\nimport { Command, Option } from 'commander';\nimport dotenv from 'dotenv';\nimport z from 'zod';\nimport { description, name, version } from '../package.json';\nimport {\n  DEFAULT,\n  Gitarist,\n  SetupCommandOptions,\n  StartCommandOptions,\n  branchPrefixes,\n} from './github';\nimport { CreateEnvExampleOptions, createEnvExample } from './libs';\n\nconst program = new Command().name(name).description(description).version(version);\n\nprogram\n  .command('setup')\n  .description(\n    'It sets up gitarist suite. It will create a new GitHub workflow file and `.env` file, adds environment variables to .env file, and opens a browser to create a new GitHub token.',\n  )\n  .addOption(new Option('--remote <string>', 'the name of remote').default(DEFAULT.remote))\n  .action(async (options: SetupCommandOptions) => {\n    await Gitarist.setup({ remote: options.remote });\n  });\n\nprogram\n  .command('start')\n  .description(\n    'It starts gitarist suite. It simulates an active user on a GitHub repository to create issues, commits, create a pull request, and merge it.',\n  )\n  .addOption(new Option('-o,--owner <string>', 'Repository owner').env('GITHUB_OWNER'))\n  .addOption(new Option('-r,--repo <string>', 'GitHub repository').env('GITHUB_REPO'))\n  .addOption(\n    new Option(\n      '-t,--token <string>',\n      `GitHub access token issued at ${Gitarist.tokenIssueUrl}`,\n    ).env('GITHUB_TOKEN'),\n  )\n  .addOption(\n    new Option('--max-commits <number>', 'Maximum number of commits per PR').default(\n      DEFAULT.maxCommits,\n    ),\n  )\n  .addOption(\n    new Option('--min-commits <number>', 'Minimum number of commits per PR').default(\n      DEFAULT.minCommits,\n    ),\n  )\n  .addOption(\n    new Option('--max-files <number>', 'Maximum number of files per commit').default(\n      DEFAULT.maxFiles,\n    ),\n  )\n  .addOption(\n    new Option('--min-files <number>', 'Minimum number of files per commit').default(\n      DEFAULT.minFiles,\n    ),\n  )\n  .addOption(\n    new Option('--issues <number>', 'A number of issues to create').default(DEFAULT.numberOfIssues),\n  )\n  .addOption(\n    new Option('--working-branch-prefix <string>', 'Prefix for working branches')\n      .choices(branchPrefixes)\n      .default(DEFAULT.workingBranchPrefix),\n  )\n  .addOption(new Option('-m,--main-branch <string>', 'Main branch').default(DEFAULT.mainBranch))\n  .addOption(\n    new Option('--stale <days>', 'A number of days before closing an issue').default(DEFAULT.stale),\n  )\n  .action(async (options: Partial<StartCommandOptions>) => {\n    ['.env'].forEach((file) => {\n      dotenv.config({ path: file });\n    });\n\n    options = {\n      ...options,\n      owner: options.owner ?? process.env.GITHUB_OWNER,\n      repo: options.repo ?? process.env.GITHUB_REPO,\n      token: options.token ?? process.env.GITHUB_TOKEN,\n    };\n\n    const validOptions = z\n      .object({\n        owner: z.string().min(2),\n        repo: z.string().min(1),\n        token: z.string().min(1),\n        minCommits: z.coerce\n          .number()\n          .min(1)\n          .refine((arg) => arg <= Number(options.maxCommits), {\n            message: 'minCommits must be less than or equal to maxCommits',\n          }),\n        maxCommits: z.coerce.number().min(1),\n        minFiles: z.coerce\n          .number()\n          .min(1)\n          .refine((arg) => arg <= Number(options.maxFiles), {\n            message: 'minFiles must be less than or equal to maxFiles',\n          }),\n        maxFiles: z.coerce.number().min(1),\n        issues: z.coerce.number().min(1),\n        workingBranchPrefix: z.enum(branchPrefixes),\n        mainBranch: z.string().min(1),\n        stale: z.coerce.number().min(1),\n      })\n      .parse(options);\n\n    const gitarist = new Gitarist({\n      owner: validOptions.owner,\n      repo: validOptions.repo,\n      token: validOptions.token,\n    });\n    await gitarist.simulateActiveUser({\n      mainBranch: validOptions.mainBranch,\n      maxCommits: validOptions.maxCommits,\n      maxFiles: validOptions.maxFiles,\n      minCommits: validOptions.minCommits,\n      minFiles: validOptions.minFiles,\n      numberOfIssues: validOptions.issues,\n      workingBranchPrefix: validOptions.workingBranchPrefix,\n      stale: validOptions.stale,\n    });\n  });\n\nprogram\n  .command('env-example')\n  .description('Create an example of .env file based on the current .env file(s)')\n  .addOption(\n    new Option(\n      '-f,--filename <string>',\n      'Read given env file such as .env.local, .env.test etc.',\n    ).default('.env'),\n  )\n  .addOption(new Option('-c,--comments', 'Preserve comments').default(true))\n  .addOption(new Option('-m,--merge', 'Merge all env files into one').default(true))\n  .action(async (options: CreateEnvExampleOptions) => {\n    const validOptions = z\n      .object({\n        comments: z.boolean(),\n        filename: z\n          .string()\n          .min(1)\n          .refine((arg) => arg !== '.env.example', {\n            message: 'filename should not be .env.example',\n          }),\n        merge: z.boolean(),\n      })\n      .parse(options);\n    await createEnvExample(validOptions);\n  });\n\nprogram.parse();\n"]}